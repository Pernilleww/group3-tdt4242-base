variables:
  HEROKU_APP_NAME: tdt4242-base

image: python:3
test:
  script:
  # this configures Django application to use attached postgres database that is run on `postgres` host
    - cd backend/secfit
    - apt-get update -qy
    - pip install -r requirements.txt
    - python manage.py test

build:
  stage: build
  image: docker:stable
  services:
    backend:
      container_name: django_group_${GROUPID}
      build:
        context: backend/secfit/
        dockerfile: Dockerfile
        args:
          DJANGO_SUPERUSER_USERNAME: "${DJANGO_SUPERUSER_USERNAME}"
          DJANGO_SUPERUSER_PASSWORD: "${DJANGO_SUPERUSER_PASSWORD}"
          DJANGO_SUPERUSER_EMAIL: "${DJANGO_SUPERUSER_EMAIL}"
      environment:
        - GROUPID=${GROUPID}
      networks:
        backend_bridge:
          ipv4_address: 10.${GROUPID}.0.4

      application:
        container_name: node_group_${GROUPID}
        build:
          context: frontend/
          dockerfile: Dockerfile
          args:
            GROUPID: ${GROUPID}
            DOMAIN: ${DOMAIN}
            URL_PREFIX: ${URL_PREFIX}
            PORT_PREFIX: ${PORT_PREFIX}
        networks:
          backend_bridge:
            ipv4_address: 10.${GROUPID}.0.5

      web:
        container_name: nginx_group_${GROUPID}
        build:
          context: .
          dockerfile: Dockerfile
        ports:
          - ${PORT_PREFIX}${GROUPID}:80
        environment:
          - GROUPID=${GROUPID}
          - PORT_PREFIX=${PORT_PREFIX}
        networks:
          backend_bridge:
            ipv4_address: 10.${GROUPID}.0.6
  script:
    - docker build



staging:
  type: deploy
  image: ruby
  script:
      - apt-get update -qy
      - apt-get install -y ruby-dev
      - gem install dpl
      - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_AUTH_TOKEN
  only:
    - master
